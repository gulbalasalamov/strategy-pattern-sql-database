package strategy;

import constant.Constant;
import service.CardAlgorithm;

import java.util.Random;

public class CardStrategy implements CardAlgorithm {
    Random random = new Random();

    /**
     * Generates a random 16 digit card number beginning with "400000"
     * The last digit is generated by applying Luhn algorithm
     * @return string version
     */
    @Override
    public String generateValidCardNumber() {
        StringBuilder str= new StringBuilder(Constant.BANK_IDENTIFICATION_NUMBER);
        //https://stackoverflow.com/questions/7961788/math-random-explanation
        long lowerBound = 100_000_000L;
        long upperBound = 900_000_000L;
        long accountNumber = (long) (Math.random() * (upperBound - lowerBound)) + lowerBound;
        //return Constant.BANK_IDENTIFICATION_NUMBER + accountNumber;
        str.append(accountNumber);
        //apply Luhn algorithm to generate checksum
        String[] digits = str.toString().split("");
        int sumOfDigits = 0;
        for (int i = 0; i < digits.length; i++) {
            int digit = Integer.parseInt(digits[i]);

            if (i % 2 == 0) {
                digit *= 2;
            }

            if (digit > 9) {
                digit -= 9;
            }
            sumOfDigits += digit;
        }
        //calculate checksum and add to Stringbuilder
        //System.out.println(sumOfDigits);
        int checksum = 10 - (sumOfDigits % 10);
        if (checksum > 9) {
            checksum = 0;
        }
        str.append(checksum);
        return str.toString();
    }

    /**
     * Generates random 4 digit pin number
     * @return
     */
    @Override
    public String generatePin() {
        int lowerBound = 1000;
        int upperBound = 9000;
        int pin = random.nextInt(upperBound - lowerBound) + lowerBound;
        return String.valueOf(pin);
    }
}

